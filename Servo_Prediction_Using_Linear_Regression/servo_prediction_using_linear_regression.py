# -*- coding: utf-8 -*-
"""Servo Prediction Using Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JnMSG8LiRoi2rQlEKcZVG11PfpSaTcHk

# **Servo Prediction Using Linear Regression**

# **Get understand about the Dataset**

**What is Servo:** In control engineering a servomechanism, usually shortened to servo, is an automatic device that uses error-sensing negative feedback to correct the action of a mechanism. On displacement-controlled applications, it usually includes a built-in encoder or other position feedback mechanism to ensure the output is achieving the desired effect. The term correctly applies only to systems where the feedback or error-correction signals help control mechanical position, speed, attitude or any other measurable variables. For example, an automotive power window control is not a servomechanism, as there is no automatic feedback that controls position-the operator does this by observation. By contrast a car's cruise control uses closed-loop feedback, which classifies it as a servomechanism. A data frame with 167 observations on 5 variables, 4 nominal and 1 as the target class. This data set is from a simulation of a servo system involving a servo amplifier, a motor, a lead screw/nut, and a sliding carriage of some sort. It may have been on of the translational axes of a robot on the 9th floor of the Al lab. In any case, the output value is almost certainly a rise time, or the time required for the system to respond to a step change in a position set point. The variables that describe the data set and their values are the following:
1. Motor A,B,C,D,E
2. Screw A,B,C,D,E
3. Pgain 3,4,5,6
4. Vgain 1,2,3,4,5
5. Class 0.13 to 7.10

# **Import Library**
"""

import pandas as pd
import numpy as np

"""# **Import CSV as Dataset**"""

df=pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Servo%20Mechanism.csv')

"""# **Get first 5 rows from Dataframe**"""

df.head()

"""# **Get Information of Dataframe**"""

df.info()

"""# **Get the Summary Statistics**"""

df.describe()

"""# **Get Column Names**"""

df.columns

"""# **Get Shape of Dataframe**"""

df.shape

"""# **Get Count of a Variable**"""

df[['Motor']].value_counts()

df[['Screw']].value_counts()

"""# **Get Encoding of Categorical Features**"""

df.replace({'Motor':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)
df.replace({'Screw':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)

"""# **Define y ans x**"""

y=df['Class']

y.shape

y

x=df[['Motor', 'Screw', 'Pgain', 'Vgain']]

x.shape

x

"""# **Get Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test= train_test_split(x,y,train_size=0.7,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LinearRegression

model=LinearRegression()

model.fit(x_train,y_train)

"""# **Get Model Prediction**"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""# **Get Model Evaluation**"""

from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

mean_absolute_error(y_test,y_pred)

mean_squared_error(y_test,y_pred)

r2_score(y_test,y_pred)

"""# **Get Visualization of Actual Vs Predicted Results**"""

import matplotlib.pyplot as plt
plt.scatter(y_test,y_pred)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual Vs Predicted')
plt.show()

"""# **Get Future Predictions**
**Lets select a random sample from existing dataset as new value**

Steps to follow

1. Extract a random row using sample function
2. Separate X and y
3. Standardize X
4. Predict
"""

x_new=df.sample(1)

x_new.shape

x_new

x_new=x_new.drop(['Class'],axis=1)

x_new

x_new.shape

y_pred_new=model.predict(x_new)

y_pred_new