# -*- coding: utf-8 -*-
"""Hill and Valley prediction with Logistic Regration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZJnf2C7vRtwMvozjFTWAc46khN1QP3W

# Import Librarys
"""

import pandas as pd
import numpy as np

"""# Use URL for file Directly."""

df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Hill%20Valley%20Dataset.csv')

"""# get the first 5 rows from dataframe"""

df.head()

"""# Get Information of Dataframe"""

df.info()



"""# Get the summary statistics"""

df.describe()

"""# Get Column Names"""

df.columns

"""# Get Shape of Dataframe"""

df.shape

"""# Get Unique Value (Class or Label) in y Variable"""

df['Class'].value_counts()

"""# Group by The Class ."""

df.groupby('Class').mean()

"""# Define y (y means Target Value) and x (x means attribute Values)."""

y=df['Class']

y.shape

y

x=df.drop(['Class'],axis=1)

x.shape

x

"""# Get Plot of first 2 rows."""

import matplotlib.pyplot as plt

plt.plot(x.iloc[0,:])
plt.title('Valley')

plt.plot(x.iloc[1,:])
plt.title('Hill')

"""# Get x verible Stadardized"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

x=ss.fit_transform(x)

x

x.shape

"""# Get Train Test Split"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test= train_test_split(x,y,train_size=0.7,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""# Get Model Train"""

from sklearn.linear_model import LogisticRegression

model=LogisticRegression()

model.fit(x_train,y_train)

"""# Get Model Prediction"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

"""# Get Probability of each predicted class"""

model.predict_proba(x_test)

"""# Model Evaluation"""

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

"""# Get Future Prediction"""

x_new=df.sample(1)

x_new.shape

x_new

x_new=x_new.drop(['Class'],axis=1)

x_new

x_new=ss.fit_transform(x_new)

y_new_pred=model.predict(x_new)

y_new_pred

model.predict_proba(x_new)

